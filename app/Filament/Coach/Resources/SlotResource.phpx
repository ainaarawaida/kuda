<?php

namespace App\Filament\Coach\Resources;

use Filters\Date;
use Filament\Forms;
use App\Models\Slot;
use App\Models\Time;
use Filament\Tables;
use App\Models\Coach;
use App\Models\Ktime;
use Filament\Forms\Get;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Illuminate\Support\Facades\DB;
use Filament\Tables\Filters\Filter;
use Illuminate\Support\Facades\Auth;
use Filament\Forms\Components\Select;
use Illuminate\Database\Eloquent\Model;
use Filament\Notifications\Notification;
use Filament\Forms\Components\DatePicker;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Filament\Forms\Components\Actions\Action;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Coach\Resources\SlotResource\Pages;
use App\Filament\Coach\Resources\SlotResource\RelationManagers;
use App\Filament\Coach\Resources\SlotResource\RelationManagers\CoachRelationManager;

class SlotResource extends Resource
{
    protected static ?string $model = Slot::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                ->label('Class Name')   
                ->maxLength(255)
                ->disabled(),
                Forms\Components\DatePicker::make('date')->default(now())
                ->required()
                ->live()
                ->disabled(),
                Select::make('time_id') 
                ->label('Time')   
                ->options(function (Get $get, $operation){
          
                    if($operation == 'edit'){
                           
                        $findSlotNotAvailable = Slot::where('date', $get('date'))->get()->pluck('time_id')->toArray();
                        $availableTime = Time::whereNotIn('id', $findSlotNotAvailable)
                        ->orWhere('id', $get('time_id'))
                        ->get()->pluck('name', 'id');
                        return $availableTime ;

                    }else{
                        $findSlotNotAvailable = Slot::where('date', $get('date'))->get()->pluck('time_id')->toArray();
                        $availableTime = Time::whereNotIn('id', $findSlotNotAvailable)->get()->pluck('name', 'id');
                        return $availableTime ;
                    }
                })
                ->required()
                ->live()
                ->disabled(),
                // Select::make('coach_id')
                // ->multiple()
                // ->relationship('coach','name')
                // ->options(function (Get $get, $operation){
          
                //     if($operation == 'edit'){
                           
                //         // $findSlotNotAvailable = Slot::where('date', $get('date'))->get()->pluck('time_id')->toArray();
                //         // $availableTime = Time::whereNotIn('id', $findSlotNotAvailable)
                //         // ->orWhere('id', $get('time_id'))
                //         // ->get()->pluck('name', 'id');
                //         // return $availableTime ;

                //         $user = Coach::get()->pluck('name', 'id');
                //         return $user;

                //     }else{
                //         // $coach = Coach::get();
                //         // // $pivotData = $coach->first();
                //         // dd($coach);
                //         // $slot = Slot::where('date',$get('date'))
                //         // // where('time_id', $get('time_id'))
                //         // // ->where('date',$get('date'))
                //         // ->get();
                //         // dd($slot);


                //         // $findCoach = Slot::wherePivot('slot_id', $slotId)->pluck('coach_id')->toArray();
                //         // $user = Coach::whereIn('id', $findCoach)->get()->pluck('name', 'id');

                //         $user = Coach::get()->pluck('name', 'id');
                //         return $user;
                //     }
                // })
                // ->preload(),
                // Select::make('rider_id')
                // ->relationship('rider','rider_id')
                // ->preload()
               
               
            ]);
    }

    public static function table(Table $table): Table
    {
       
        
        return $table
            ->columns([
                // Tables\Columns\TextColumn::make('rider_for_coach')
                // ->label('Riders')   
                // ->searchable(),

                // Tables\Columns\TextColumn::make('coach.name')
                // ->label('Coaches')   
                // ->searchable(),

                Tables\Columns\TextColumn::make('name')
                ->label('Class Name')   
                ->searchable(),
                Tables\Columns\TextColumn::make('time.name')
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('deleted_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\TrashedFilter::make(),
                Filter::make('date')
                    ->form([
                        DatePicker::make('date_at')
                        ->default(now()),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['date_at'],
                                fn (Builder $query, $date): Builder => $query->whereDate('date', '=', $date),
                            );
                    })
                    
            ])
            ->recordUrl(function ($record) {
                return false;
            })
            ->actions([
                Tables\Actions\EditAction::make()
                ->label('Check'),
                Tables\Actions\Action::make('Booking Coach')
                    ->icon('heroicon-o-clipboard-document-check')
                    ->hidden(function($record){
                        return true ;
                       if(count($record->coach_for_slot) > 0){
                        return true ;
                       }
                       return false ;
                    })
                    ->requiresConfirmation(function (Tables\Actions\Action $action, $record) {
                        $action->modalDescription('Are you sure you want to become coach for this slot '. $record->name .'?');
                        $action->modalHeading('Set slot "' . $record->name . '" as coach');

                        return $action;
                    })
                    ->action(function ($record, $data) {
                        $couch_id = Coach::where('user_id', Auth::user()->id)->first()->id ;
                        $record->coach()->attach($couch_id, ['rider_id' => null]);
                        // dd($record);
                        // $record->is_default = true;
                        // $record->save();
                    }),
            ])
            // ->headerActions([
            //     Tables\Actions\CreateAction::make(),
            // ])
            ->bulkActions([
                // Tables\Actions\BulkActionGroup::make([
                //     Tables\Actions\DeleteBulkAction::make(),
                //     Tables\Actions\ForceDeleteBulkAction::make(),
                //     Tables\Actions\RestoreBulkAction::make(),
                // ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
            CoachRelationManager::class
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListSlots::route('/'),
            'create' => Pages\CreateSlot::route('/create'),
            'edit' => Pages\EditSlot::route('/{record}/edit'),
        ];
    }


    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
        ->withoutGlobalScopes([
            SoftDeletingScope::class,
        ]);
      
        $query = parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);

            $currentUserId = Auth::user()->id ;
            $availableId = collect(DB::select("
            SELECT  slots.id, coach_slot.slot_id, coach_slot.coach_id, coaches.user_id
            FROM slots
            LEFT JOIN coach_slot
            ON slots.id =  coach_slot.slot_id
            LEFT JOIN coaches
            ON coach_slot.coach_id = coaches.id
            
          WHERE   
          
            coaches.user_id = '{$currentUserId}'
            OR 
            coach_slot.coach_id IS NULL
          
            "))
            ->pluck('id')->toArray();
            return $query->whereIn('id', $availableId) ;

      

    }

  

}
